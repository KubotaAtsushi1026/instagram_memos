--- いいねテーブルの作成とダミーデータ挿入
-- 20210825 by Takanori Shima

## マイグレーションファイル作成
php artisan make:migration create_favorites_table --create=favorites

## /bbs/database/migrations/2021_08_25_131040_create_favorites_table.php 編集
```
    public function up()
    {
        Schema::create('favorites', function (Blueprint $table) {
            $table->increments('id');
            $table->unsignedBigInteger('user_id');
            $table->unsignedBigInteger('post_id');
            $table->timestamps();

            // 外部キー設定
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->foreign('post_id')->references('id')->on('posts')->onDelete('cascade');

            // user_idとpost_idの組み合わせの重複を許さない
            $table->unique(['user_id', 'post_id']);
        });
    }
```

## マイグレーション
php artisan migrate

mysql> desc favorites;
+------------+---------------------+------+-----+---------+----------------+
| Field      | Type                | Null | Key | Default | Extra          |
+------------+---------------------+------+-----+---------+----------------+
| id         | int(10) unsigned    | NO   | PRI | NULL    | auto_increment |
| user_id    | bigint(20) unsigned | NO   | MUL | NULL    |                |
| post_id    | bigint(20) unsigned | NO   | MUL | NULL    |                |
| created_at | timestamp           | YES  |     | NULL    |                |
| updated_at | timestamp           | YES  |     | NULL    |                |
+------------+---------------------+------+-----+---------+----------------+


# /bbs/app/User.php 追記
```
<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Profile;
use App\Post;
use App\Comment;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
    
    // 「１対１」→ メソッド名は単数形
    public function profile()
    {
        // Profileモデルのデータを引っ張てくる
        return $this->hasOne(Profile::class);
    }
    
    // 「１対多」→ メソッド名は複数形
    public function posts()
    {
        return $this->hasMany(Post::class);
    }
    

    // 自分がしたコメント一覧取得
    public function comments(){
        return $this->hasMany(Comment::class);
    }
    
    // コメント投稿
    public function add_comment($post_id, $content){
        $comment = new Comment();
        $comment->user_id = $this->id;
        $comment->post_id = $post_id;
        $comment->content = $content;
        $comment->save();
        
    }
    
    // いいねをしている投稿一覧取得
    public function favorites()
    {
        return $this->belongsToMany(Post::class, 'favorites', 'user_id', 'post_id')->withTimestamps();
    }
}

```

# /bbs/app/Post.php 追記
```
<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\User;
use App\Comment;

class Post extends Model
{
    protected $fillable = ['user_id', 'title', 'content', 'image', ];
    
    /**
     * この投稿を所有するユーザ。（ Userモデルとの関係を定義）
     */
    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    // その投稿に紐づいたコメントをしたユーザー一覧取得
    public function comment_users(){
        return $this->belongsToMany(User::class, 'comments', 'post_id', 'user_id')->withTimestamps();
    }
    
    // その投稿に紐づいたコメント一覧取得
    public function comments(){
        return $this->hasMany(Comment::class);
    }
    
    // この投稿にいいねをしている人の一覧取得
    public function favorite_users()
    {
        return $this->belongsToMany(User::class, 'favorites', 'post_id', 'user_id')->withTimestamps();
    }
}

```

## FavoritesController 作成
php artisan make:controller FavoritesController

## /bbs/app/Http/Controllers/FavoritesController.php 追記
```
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\User;

class FavoritesController extends Controller
{
    public function store(Request $request, $id)
    {
        \Auth::user()->favorite($id);
        session(['flash_message' => 'いいねしました']);
        return back();
    }

    public function destroy($id)
    {
        \Auth::user()->unfavorite($id);
        session(['flash_message' => 'いいねを解除しました']);
        return back();
    }
}

```

## /bbs/routes/web.php 変形
```
<?php

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the "web" middleware group. Now create something great!
|
*/

// Route::get('/', function () {
//     return view('welcome');
// });
// プレビューをした瞬間の設定
Route::get('/', 'ToppagesController@index');

// ユーザ登録系
Route::get('signup', 'Auth\RegisterController@showRegistrationForm')->name('signup.get');
Route::post('signup', 'Auth\RegisterController@register')->name('signup.post');

// ログイン認証系
Route::get('login', 'Auth\LoginController@showLoginForm')->name('login');
Route::post('login', 'Auth\LoginController@login')->name('login.post');
Route::get('logout', 'Auth\LoginController@logout')->name('logout.get');

// プロフィール関係
Route::resource('profiles', 'ProfilesController');

// ログイン後のトップ画面
Route::get('top', 'PostsController@index');

// ユーザー認証必要
Route::group(['middleware' => ['auth']], function () {
    Route::resource('users', 'UsersController', ['only' => ['index', 'show']]);
    // 画像投稿関係
    Route::resource('posts', 'PostsController');
    Route::group(['prefix' => 'users/{id}'], function () {
        // その他        
    });
    Route::group(['prefix' => 'posts/{id}'], function () {
        // 投稿に対するコメント
        Route::post('comment', 'CommentsController@store')->name('post.comment');
        // いいね系
        Route::post('favorite', 'FavoritesController@store')->name('favorites.favorite');
        Route::delete('unfavorite', 'FavoritesController@destroy')->name('favorites.unfavorite');
    });
});
```

## 最新ルーティング確認
php artisan route:list

+--------+-----------+-------------------------+----------------------+-------------------------------------------------------------------+--------------+
| Domain | Method    | URI                     | Name                 | Action                                                            | Middleware   |
+--------+-----------+-------------------------+----------------------+-------------------------------------------------------------------+--------------+
|        | GET|HEAD  | /                       |                      | App\Http\Controllers\ToppagesController@index                     | web          |
|        | GET|HEAD  | api/user                |                      | Closure                                                           | api,auth:api |
|        | GET|HEAD  | login                   | login                | App\Http\Controllers\Auth\LoginController@showLoginForm           | web,guest    |
|        | POST      | login                   | login.post           | App\Http\Controllers\Auth\LoginController@login                   | web,guest    |
|        | GET|HEAD  | logout                  | logout.get           | App\Http\Controllers\Auth\LoginController@logout                  | web          |
|        | POST      | posts                   | posts.store          | App\Http\Controllers\PostsController@store                        | web,auth     |
|        | GET|HEAD  | posts                   | posts.index          | App\Http\Controllers\PostsController@index                        | web,auth     |
|        | GET|HEAD  | posts/create            | posts.create         | App\Http\Controllers\PostsController@create                       | web,auth     |
|        | POST      | posts/{id}/comment      | post.comment         | App\Http\Controllers\CommentsController@store                     | web,auth     |
|        | POST      | posts/{id}/favorite     | favorites.favorite   | App\Http\Controllers\FavoritesController@store                    | web,auth     |
|        | DELETE    | posts/{id}/unfavorite   | favorites.unfavorite | App\Http\Controllers\FavoritesController@destroy                  | web,auth     |
|        | GET|HEAD  | posts/{post}            | posts.show           | App\Http\Controllers\PostsController@show                         | web,auth     |
|        | PUT|PATCH | posts/{post}            | posts.update         | App\Http\Controllers\PostsController@update                       | web,auth     |
|        | DELETE    | posts/{post}            | posts.destroy        | App\Http\Controllers\PostsController@destroy                      | web,auth     |
|        | GET|HEAD  | posts/{post}/edit       | posts.edit           | App\Http\Controllers\PostsController@edit                         | web,auth     |
|        | GET|HEAD  | profiles                | profiles.index       | App\Http\Controllers\ProfilesController@index                     | web          |
|        | POST      | profiles                | profiles.store       | App\Http\Controllers\ProfilesController@store                     | web          |
|        | GET|HEAD  | profiles/create         | profiles.create      | App\Http\Controllers\ProfilesController@create                    | web          |
|        | PUT|PATCH | profiles/{profile}      | profiles.update      | App\Http\Controllers\ProfilesController@update                    | web          |
|        | GET|HEAD  | profiles/{profile}      | profiles.show        | App\Http\Controllers\ProfilesController@show                      | web          |
|        | DELETE    | profiles/{profile}      | profiles.destroy     | App\Http\Controllers\ProfilesController@destroy                   | web          |
|        | GET|HEAD  | profiles/{profile}/edit | profiles.edit        | App\Http\Controllers\ProfilesController@edit                      | web          |
|        | POST      | signup                  | signup.post          | App\Http\Controllers\Auth\RegisterController@register             | web,guest    |
|        | GET|HEAD  | signup                  | signup.get           | App\Http\Controllers\Auth\RegisterController@showRegistrationForm | web,guest    |
|        | GET|HEAD  | top                     |                      | App\Http\Controllers\PostsController@index                        | web          |
|        | GET|HEAD  | users                   | users.index          | App\Http\Controllers\UsersController@index                        | web,auth     |
|        | GET|HEAD  | users/{user}            | users.show           | App\Http\Controllers\UsersController@show                         | web,auth     |
+--------+-----------+-------------------------+----------------------+-------------------------------------------------------------------+--------------+

## /bbs/app/User.php 追記
```
<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use App\Profile;
use App\Post;
use App\Comment;

class User extends Authenticatable
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
    
    // 「１対１」→ メソッド名は単数形
    public function profile()
    {
        // Profileモデルのデータを引っ張てくる
        return $this->hasOne(Profile::class);
    }
    
    // 「１対多」→ メソッド名は複数形
    public function posts()
    {
        return $this->hasMany(Post::class);
    }
    

    // 自分がしたコメント一覧取得
    public function comments(){
        return $this->hasMany(Comment::class);
    }
    
    // コメント投稿
    public function add_comment($post_id, $content){
        $comment = new Comment();
        $comment->user_id = $this->id;
        $comment->post_id = $post_id;
        $comment->content = $content;
        $comment->save();
        
    }
    
    // いいねをしている投稿一覧取得
    public function favorites()
    {
        return $this->belongsToMany(Post::class, 'favorites', 'user_id', 'post_id')->withTimestamps();
    }
    
    // いいね追加
    public function favorite($post_id)
    {
        // 既にいいねしているかの確認
        $exist = $this->is_favorite($post_id);
    
        if ($exist) {
            // 既にいいねしていれば何もしない
            return false;
        } else {
            // いいねしていないのであればいいねする
            $this->favorites()->attach($post_id);
            return true;
        }
    }
    
    // いいね解除
    public function unfavorite($post_id)
    {
        // 既にいいねしているかの確認
        $exist = $this->is_favorite($post_id);
    
        if ($exist) {
            // 既にいいねしていればいいねを解除
            $this->favorites()->detach($post_id);
            return true;
        } else {
            // いいねしていない場合
            return false;
        }
    }
    
    // 注目する投稿がすでにいいねされているか判定
    public function is_favorite($post_id)
    {
        return $this->favorites()->where('post_id', $post_id)->exists();
    }
}

```

## tinker でダミーいいね追加
php artisan tinker

use App\User
use App\Post
$user = User::first()
$post = Post::first()
$user->is_favorite($post->id)
$user->favorite($post->id)
$user->is_favorite($post->id)
$user->favorites()->get()

$post->favorite_users()->get()
count($post->favorite_users()->get())

$user = User::find(2)
$user->favorite(4)
$user->favorite(4)
$post->favorite_users()->get()

## Git
git add .
git commit -m "いいねテーブルの作成とダミーデータ挿入完了"
git push origin main
